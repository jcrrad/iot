#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');
var fs=require('fs');
var previous=[];
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function readFile(name){
 fs.readFile(name, "utf-8", function(err, data) {
  
        if (err) {
            return err;}
        else
        return data;
    }
    )
}
function writeFile(name,data){
 fs.writeFile(name,data,function(err, data) {
        if (err) 
           return err;
        else
          return data;
    }
    )
}
function writeA(data)
{
  data=parseFloat(data.substring(1));
 // previous['a']['data'].append(data);
  writeFile("a.json",data);
}
function writeB(data)
{
  //data=parseFloat(data.substring(1));previous['b']['data'].append(data);
  writeFile("b.json",data);}
function readXBee(){
 fs.readFile("previous.json", "utf-8", function(err, data) {
  
        if (err) {
            return err;}
        else
        previous=JSON.parse(data);
      console.log(previous)
    }
    )
  
  var sp = require("serialport");
        var SerialPort = sp.SerialPort
        var serialPort = new SerialPort("/dev/ttyUSB0", {
            baudrate: 9600,
            parser: sp.parsers.readline("\n")
        });
        var a, b = "";
        //  while (!a && !b) {
        var temp = "";
        serialPort.on('data', function(data) {
            console.log(data);
            temp = data;
            if (data.indexOf(" A "))
                writeA(data);
            if (data.indexOf(" B "))
                writeB(data) });
      }
function onListening() {   
   readXBee();
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
